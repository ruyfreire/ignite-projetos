generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DELIVERYMAN
}

model User {
  id       String   @id @default(uuid())
  name     String
  cpf      String   @unique
  password String
  role     UserRole @default(DELIVERYMAN)

  delivery Delivery[]
  photos   Photo[]

  @@map("users")
}

model Receiver {
  id           String  @id @default(uuid())
  name         String
  cpf          String  @unique
  zip_code     String
  street       String
  neighborhood String
  city         String
  state        String
  complement   String?
  number       String
  latitude     Float
  longitude    Float

  delivery      Delivery[]
  notifications Notification[]

  @@map("receivers")
}

model Order {
  id    String @id @default(uuid())
  title String @unique

  delivery Delivery[]

  @@map("orders")
}

enum DeliveryStatus {
  AVAILABLE
  ASSIGNED
  DELIVERED
  RETURNED
}

model Delivery {
  id          String          @id @default(uuid())
  availableAt DateTime?       @map("available_at")
  deliveredAt DateTime?       @map("delivered_at")
  returnedAt  DateTime?       @map("returned_at")
  photoId     String?         @map("photo_id")
  status      DeliveryStatus?

  order   Order  @relation(fields: [orderId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  orderId String @map("order_id")

  receiver          Receiver @relation(fields: [receiverId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  receiverId        String   @map("receiver_id")
  receiverLatitude  Float    @map("receiver_latitude")
  receiverLongitude Float    @map("receiver_longitude")

  deliveryman   User?   @relation(fields: [deliverymanId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  deliverymanId String? @map("deliveryman_id")

  @@map("deliveries")
}

model Notification {
  id         String    @id @default(uuid())
  receiverId String    @map("receiver_id")
  title      String
  content    String
  readAt     DateTime? @map("read_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  recipient Receiver @relation(fields: [receiverId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@map("notifications")
}

model Photo {
  id    String @id @default(uuid())
  title String
  url   String

  user   User?   @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  userId String? @map("user_id")

  @@map("photos")
}
