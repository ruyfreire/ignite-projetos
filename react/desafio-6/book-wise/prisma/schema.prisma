// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  created_at    DateTime  @default(now())

  accounts     Account[]
  sessions     Session[]
  reviews      Review[]
  readed_books ReadedBooks[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  books Book[]

  @@map("categories")
}

model Book {
  id                String   @id @default(uuid())
  title             String
  title_normalized  String
  author            String
  author_normalized String
  image_url         String?
  pages             Int
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  categories   Category[]
  reviews      Review[]
  readed_books ReadedBooks[]

  @@map("books")
}

model Review {
  id          String   @id @default(uuid())
  description String
  rating      Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  book    Book   @relation(fields: [book_id], references: [id], onDelete: Cascade)
  book_id String

  reviewer_user User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String

  @@map("reviews")
}

model ReadedBooks {
  id     String  @id @default(uuid())
  readed Boolean @default(false)

  book    Book   @relation(fields: [book_id], references: [id], onDelete: Cascade)
  book_id String

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("readed_books")
}
